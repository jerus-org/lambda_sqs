version: 2.1

parameters:
  min-rust-version:
    type: string
    default: "1.65"
  fingerprint:
    type: string
    default: SHA256:OkxsH8Z6Iim6WDJBaII9eTT9aaO1f3eDc6IpsgYYPVg

orbs:
  toolkit: jerus-org/circleci-toolkit@0.21.0

executors:
  rust-env:
    docker:
      - image: jerusdp/ci-rust:<<pipeline.parameters.min-rust-version>>

commands:
  cargo-build:
    parameters:
      rust-version:
        default: "stable"
        type: string
    steps:
      - run:
          name: Update Rust and check build <<parameters.rust-version>>
          command: |
            cargo +<<parameters.rust-version>> check --all-features

jobs:
  required-builds:
    executor: rust-env
    steps:
      - checkout
      - run: cargo --version
      - cargo-build:
          rust-version: "stable"
      - cargo-build:
          rust-version: "<<pipeline.parameters.min-rust-version>>"

  optional-builds:
    executor: rust-env
    steps:
      - checkout
      - run: cargo --version
      - cargo-build:
          rust-version: "nightly"
      - cargo-build:
          rust-version: "beta"

  docs:
    executor: rust-env
    environment:
      RUSTDOCFLAGS: --cfg docsrs -Dwarnings
    steps:
      - checkout
      - run:
          name: Test generation of all of the documentation for the crate
          command: |
            cargo +nightly doc --lib --no-deps --all-features --document-private-items

# Invoke jobs via workflows
# See: https://circleci.com/docs/2.0/configuration-reference/#workflows
workflows:
  validation:
    when:
      not:
        equal: [scheduled_pipeline, << pipeline.trigger_source >>]
    jobs:
      - required-builds
      - docs
      - optional-builds
      - toolkit/common_tests:
          min_rust_version: << pipeline.parameters.min-rust-version >>
      - toolkit/idiomatic_rust:
          min_rust_version: << pipeline.parameters.min-rust-version >>
      - toolkit/update_changelog:
          requires:
            - required-builds
            - toolkit/common_tests
            - toolkit/idiomatic_rust
          context:
            - release
          ssh_fingerprint: << pipeline.parameters.fingerprint >>
          min_rust_version: << pipeline.parameters.min-rust-version >>

  release:
    when:
      and:
        - equal: [scheduled_pipeline, << pipeline.trigger_source >>]
        - equal: ["release check", << pipeline.schedule.name >>]
    jobs:
      - toolkit/make_release:
          context:
            - release
          ssh_fingerprint: << pipeline.parameters.fingerprint >>
          min_rust_version: << pipeline.parameters.min-rust-version >>
