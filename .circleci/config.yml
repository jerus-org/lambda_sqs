version: 2.1

parameters:
  min-rust-version:
    type: string
    default: "1.61"

executors:
  rust-env:
    docker:
      - image: jerusdp/ci-rust:<<pipeline.parameters.min-rust-version>>

commands:
  cargo-build:
    parameters:
      rust-version:
        default: "stable"
        type: string
    steps:
      - run:
          name: Update Rust and check build <<parameters.rust-version>>
          command: |
            cargo +<<parameters.rust-version>> check --all-features

jobs:
  required-builds:
    executor: rust-env
    steps:
      - checkout
      - run: cargo --version
      - cargo-build:
          rust-version: "stable"
      - cargo-build:
          rust-version: "<<pipeline.parameters.min-rust-version>>"

  optional-builds:
    executor: rust-env
    steps:
      - checkout
      - run: cargo --version
      - cargo-build:
          rust-version: "nightly"
      - cargo-build:
          rust-version: "beta"

  basic-test:
    executor: rust-env
    steps:
      - checkout
      - run: cargo --version
      - run:
          name: Check formatting for code
          command: |
            rustfmt --version
            cargo fmt --all -- --check
      - run:
          name: Check idiomatic code use with Clippy
          command: "cargo clippy --all --tests --all-features -- -D warnings"
      - run:
          name: Test crate with no features specified
          command: "cargo test"

  docs:
    executor: rust-env
    environment:
      RUSTDOCFLAGS: --cfg docsrs -Dwarnings
    steps:
      - checkout
      - run:
          name: Test generation of all of the documentation for the crate
          command: |
            cargo +nightly doc --lib --no-deps --all-features --document-private-items

  release-ready:
    executor: rust-env
    steps:
      - checkout
      - run:
          name: Check if ready to make a release
          command: |
            set -eo pipefail

            if [ "$(nextsv -q)" != "none" ]
            then
              exit 0
            else 
             exit 1
            fi

  make-release:
    executor: rust-env
    steps:
      - add_ssh_keys:
          fingerprints:
            - $SSH_FINGERPRINT
      - checkout
      - run:
          name: Configure git for user and signing
          command: |
            git config --global user.email "$USER_EMAIL"
            git config --global user.name "$USER_NAME"
            git config --global gpg.format ssh
            git config --global user.signingKey "$SSH_PUB"
            git config --local --list
      - run:
          name: Publish update
          command: |
            cargo release -vv --registry spare --execute --no-confirm "$(nextsv -vv -e feature -r 'CHANGES.md' -r 'CHANGELOG.md')"
# Invoke jobs via workflows
# See: https://circleci.com/docs/2.0/configuration-reference/#workflows
workflows:
  validation:
    when:
      not:
        equal: [scheduled_pipeline, << pipeline.trigger_source >>]
    jobs:
      - required-builds
      - basic-test
      - docs
      - optional-builds
  release:
    when:
      and:
        - equal: [scheduled_pipeline, << pipeline.trigger_source >>]
        - equal: ["release check", << pipeline.schedule.name >>]
    jobs:
      - release-ready
      - make-release:
          requires:
            - release-ready
